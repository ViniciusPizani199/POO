package atividade1;

import java.util.ArrayList;
import java.util.List;

public class Computador {
    private double memoriaRAMDisponivel; // em GB
    private double ssdDisponivel; // em GB
    private int nucleosCPU;
    private double operacoesPorSegundo; // em Hz (ex: 3.5e9 para 3.5 GHz)
    private SistemaOperacional sistemaOperacional;
    private List<Programa> programasInstalados;

    // Construtor
    public Computador(double memoriaRAMTotal, double ssdTotal, int nucleosCPU, double operacoesPorSegundo, SistemaOperacional so) {
        this.memoriaRAMDisponivel = memoriaRAMTotal;
        this.ssdDisponivel = ssdTotal;
        this.nucleosCPU = nucleosCPU;
        this.operacoesPorSegundo = operacoesPorSegundo;
        this.sistemaOperacional = so;
        this.programasInstalados = new ArrayList<>();
    }

    /**
     * Tenta instalar um programa, verificando o espaço em disco.
     */
    public void instalarPrograma(Programa programa) {
        System.out.println("Tentando instalar o programa: " + programa.getNome() + "...");
        if (programa.getSsdOcupado() <= this.ssdDisponivel) {
            this.ssdDisponivel -= programa.getSsdOcupado();
            this.programasInstalados.add(programa);
            System.out.println("-> Programa '" + programa.getNome() + "' instalado com sucesso!");
            System.out.printf("-> SSD disponível agora: %.2f GB\n", this.ssdDisponivel);
        } else {
            System.out.println("-> ERRO: Espaço em SSD insuficiente para instalar '" + programa.getNome() + "'.");
            System.out.printf("   (Necessário: %.2f GB | Disponível: %.2f GB)\n", programa.getSsdOcupado(), this.ssdDisponivel);
        }
    }

    /**
     * Executa um programa, verificando se está instalado e se há memória RAM suficiente.
     * Imprime as mensagens de estado da execução.
     */
    public void executarPrograma(Programa programa) {
        System.out.println("Tentando executar o programa: " + programa.getNome() + "...");

        // Verifica se o programa está instalado
        if (!programasInstalados.contains(programa)) {
            System.out.println("-> ERRO: O programa '" + programa.getNome() + "' não está instalado e não pode ser executado.");
            return;
        }
        
        // Verifica se há memória RAM suficiente
        if (programa.getMemoriaRAMAlocada() <= this.memoriaRAMDisponivel) {
            System.out.println("-> Sucesso! Executando '" + programa.getNome() + "'...");
            
            // Calcula o tempo de execução
            double tempoDeExecucao = programa.getQuantidadeOperacoes() / (this.operacoesPorSegundo * this.nucleosCPU);

            System.out.printf("-> Tempo de execução estimado: %.4f segundos.\n", tempoDeExecucao);
        } else {
            System.out.println("-> ERRO na execução: Memória RAM insuficiente para executar '" + programa.getNome() + "'.");
            System.out.printf("   (Necessário: %.2f GB | Disponível: %.2f GB)\n", programa.getMemoriaRAMAlocada(), this.memoriaRAMDisponivel);
        }
    }

    // Getters e Setters
    public double getMemoriaRAMDisponivel() {
        return memoriaRAMDisponivel;
    }

    public void setMemoriaRAMDisponivel(double memoriaRAMDisponivel) {
        this.memoriaRAMDisponivel = memoriaRAMDisponivel;
    }

    public double getSsdDisponivel() {
        return ssdDisponivel;
    }

    public void setSsdDisponivel(double ssdDisponivel) {
        this.ssdDisponivel = ssdDisponivel;
    }

    public int getNucleosCPU() {
        return nucleosCPU;
    }

    public void setNucleosCPU(int nucleosCPU) {
        this.nucleosCPU = nucleosCPU;
    }

    public double getOperacoesPorSegundo() {
        return operacoesPorSegundo;
    }

    public void setOperacoesPorSegundo(double operacoesPorSegundo) {
        this.operacoesPorSegundo = operacoesPorSegundo;
    }

    public SistemaOperacional getSistemaOperacional() {
        return sistemaOperacional;
    }

    public void setSistemaOperacional(SistemaOperacional sistemaOperacional) {
        this.sistemaOperacional = sistemaOperacional;
    }

    public List<Programa> getProgramasInstalados() {
        return programasInstalados;
    }

    public void setProgramasInstalados(List<Programa> programasInstalados) {
        this.programasInstalados = programasInstalados;
    }
}
